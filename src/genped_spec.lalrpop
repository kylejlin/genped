use std::str::FromStr;
use crate::ast::*;

grammar;

pub Spec: Spec = { // (1)
    Statements => Spec { statements: <> },
    // TODO: Delete
    // Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    // Factor,
};

pub Statements: Statements = {
    // TODO
    () => Statements::Nil,
    <h:Statements> <t:Statement> => Statements::Cons(Box::new(h), t),
};

pub Statement: Statement = {
    "struct" => Statement::Struct(Struct {
        opt_derive_clause: OptDeriveClause::None,
        struct_kw: StructKeyword,
        name: Ident("hello".to_string()),
        body: StructBody::Curly(CurlyStructBody {
            lcurly: LCurly,
            fields: CurlyStructFields::Nil,
            rcurly: RCurly,
        })
    })
};

// ExprOp: Opcode = { // (3)
//     "+" => Opcode::Add,
//     "-" => Opcode::Sub,
// };

// Factor: Box<Expr> = {
//     Factor FactorOp Term => Box::new(Expr::Op(<>)),
//     Term,
// };

// FactorOp: Opcode = {
//     "*" => Opcode::Mul,
//     "/" => Opcode::Div,
// };

// Term: Box<Expr> = {
//     Num => Box::new(Expr::Number(<>)), // (4)
//     "(" <Expr> ")"
// };

// Num: i32 = {
//     r"[0-9]+" => i32::from_str(<>).unwrap()
// };